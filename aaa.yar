rule elf_mirai_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-22"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/elf.mirai"
        malpedia_rule_date = "20201222"
        malpedia_hash = "30354d830a29f0fbd3714d93d94dea941d77a130"
        malpedia_version = "20201023"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 89d0 c1e005 01d0 89ca 29c2 }
            // n = 5, score = 300
            //   89d0                 | mov                 byte ptr [eax + edx], 0
            //   c1e005               | push                ebp
            //   01d0                 | cmp                 eax, -1
            //   89ca                 | je                  0x1a81
            //   29c2                 | dec                 eax

        $sequence_1 = { c7433400000000 894330 c6433801 c6433903 }
            // n = 4, score = 300
            //   c7433400000000       | mov                 eax, 0xaaaaaaab
            //   894330               | mul                 ebx
            //   c6433801             | mov                 eax, edx
            //   c6433903             | pop                 edi

        $sequence_2 = { e8???????? c7433400000000 894330 c6433801 }
            // n = 4, score = 300
            //   e8????????           |                     
            //   c7433400000000       | cmp                 dword ptr [eax + 0x10], 4
            //   894330               | jle                 0xc76
            //   c6433801             | mov                 byte ptr [esp + ecx + 0x2010], 0

        $sequence_3 = { e8???????? c7433400000000 894330 c6433801 c6433903 }
            // n = 5, score = 300
            //   e8????????           |                     
            //   c7433400000000       | add                 esp, 0x10
            //   894330               | mov                 byte ptr [esp + 0x634], 0x2e
            //   c6433801             | mov                 byte ptr [esp + 0x635], 0x2f
            //   c6433903             | sub                 esp, 0xc

        $sequence_4 = { 807c242b00 66894304 7406 66c743064000 c643092f }
            // n = 5, score = 300
            //   807c242b00           | mov                 word ptr [ebx + 4], ax
            //   66894304             | ror                 ax, 8
            //   7406                 | mov                 word ptr [ebx + 4], ax
            //   66c743064000         | movzx               eax, byte ptr [esp + 0x68]
            //   c643092f             | movzx               esi, word ptr [esp + 0xe]

        $sequence_5 = { e9???????? e8???????? 66894314 e9???????? }
            // n = 4, score = 300
            //   e9????????           |                     
            //   e8????????           |                     
            //   66894314             | mov                 dword ptr [esp], 0x31
            //   e9????????           |                     

        $sequence_6 = { c1ea03 89d0 c1e005 01d0 89ca }
            // n = 5, score = 300
            //   c1ea03               | mov                 ebx, dword ptr [esp + 0x44]
            //   89d0                 | mov                 dword ptr [edx + 0xc], eax
            //   c1e005               | mov                 eax, dword ptr [esp + 0x28]
            //   01d0                 | lea                 eax, [eax + eax*2]
            //   89ca                 | mov                 eax, dword ptr [ebx + eax*8 + 0x10]

        $sequence_7 = { 6689432a e8???????? c7433400000000 894330 c6433801 c6433903 }
            // n = 6, score = 300
            //   6689432a             | add                 esp, 0x20
            //   e8????????           |                     
            //   c7433400000000       | test                eax, eax
            //   894330               | jle                 0x1e81
            //   c6433801             | push                eax
            //   c6433903             | mov                 edi, eax

        $sequence_8 = { 807c242b00 66894304 7406 66c743064000 }
            // n = 4, score = 300
            //   807c242b00           | push                1
            //   66894304             | lea                 eax, [esp + 0x65e]
            //   7406                 | push                eax
            //   66c743064000         | push                1

        $sequence_9 = { 8d429f 3c19 7705 8d42e0 }
            // n = 4, score = 300
            //   8d429f               | mov                 al, byte ptr [esp + 0x8c]
            //   3c19                 | mov                 dword ptr [esp + 0x10], eax
            //   7705                 | push                eax
            //   8d42e0               | mov                 al, byte ptr [esp + 0x898]

    condition:
        7 of them and filesize < 131728
}